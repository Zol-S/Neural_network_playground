define([
	'jquery',
	'underscore',
	'backbonejs',
	'text!backbone/templates/digit_recognizer.html',
	'tfjs270',
	'bootstrap'
], function ($, _, Backbone, digitRecognizerTemplate, tf) {
	'use strict';

	var view = Backbone.View.extend({
		el: '#main',
		mnist_digits: [
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.624,0.992,0.624,0.196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.188,0.933,0.988,0.988,0.988,0.929,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.212,0.89,0.992,0.988,0.937,0.914,0.988,0.224,0.024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.039,0.235,0.878,0.988,0.992,0.988,0.792,0.329,0.988,0.992,0.478,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.639,0.988,0.988,0.988,0.992,0.988,0.988,0.376,0.741,0.992,0.655,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.933,0.992,0.992,0.745,0.447,0.992,0.894,0.184,0.31,1,0.659,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.188,0.933,0.988,0.988,0.702,0.047,0.294,0.475,0.082,0,0,0.992,0.953,0.196,0,0,0,0,0,0,0,0,0,0,0,0,0,0.149,0.647,0.992,0.914,0.816,0.329,0,0,0,0,0,0,0.992,0.988,0.647,0,0,0,0,0,0,0,0,0,0,0,0,0.027,0.698,0.988,0.941,0.278,0.075,0.11,0,0,0,0,0,0,0.992,0.988,0.765,0,0,0,0,0,0,0,0,0,0,0,0,0.224,0.988,0.988,0.247,0,0,0,0,0,0,0,0,0,0.992,0.988,0.765,0,0,0,0,0,0,0,0,0,0,0,0,0.776,0.992,0.745,0,0,0,0,0,0,0,0,0,0,1,0.992,0.769,0,0,0,0,0,0,0,0,0,0,0,0.298,0.965,0.988,0.439,0,0,0,0,0,0,0,0,0,0,0.992,0.988,0.58,0,0,0,0,0,0,0,0,0,0,0,0.333,0.988,0.902,0.098,0,0,0,0,0,0,0,0,0.027,0.529,0.992,0.729,0.047,0,0,0,0,0,0,0,0,0,0,0,0.333,0.988,0.875,0,0,0,0,0,0,0,0,0.027,0.514,0.988,0.882,0.278,0,0,0,0,0,0,0,0,0,0,0,0,0.333,0.988,0.569,0,0,0,0,0,0,0,0.188,0.647,0.988,0.678,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.337,0.992,0.882,0,0,0,0,0,0,0.447,0.933,0.992,0.635,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.333,0.988,0.976,0.573,0.188,0.114,0.333,0.698,0.882,0.992,0.875,0.655,0.22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.333,0.988,0.988,0.988,0.898,0.843,0.988,0.988,0.988,0.769,0.51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.11,0.78,0.988,0.988,0.992,0.988,0.988,0.914,0.569,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.098,0.502,0.988,0.992,0.988,0.553,0.145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], // 0
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.027,0.69,0.996,0.878,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.992,0.992,0.875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.016,0.667,0.992,0.992,0.839,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.514,0.992,0.992,0.851,0.153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.82,0.992,0.992,0.525,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.294,0.941,0.992,0.937,0.102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.722,0.992,0.961,0.247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.557,1,0.992,0.725,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.243,0.898,0.996,0.949,0.286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.212,0.898,0.992,0.996,0.412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.596,0.996,0.996,0.835,0.102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.125,0.953,0.992,0.992,0.451,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.008,0.557,0.992,0.992,0.608,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.118,0.992,0.992,0.91,0.216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.294,0.992,0.992,0.643,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.282,0.91,0.992,0.741,0.067,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.878,0.992,0.992,0.639,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.169,0.922,0.992,0.992,0.765,0.082,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.11,0.906,0.992,0.992,0.722,0.055,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.882,0.992,0.992,0.294,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], // 1
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.153,0.894,0.996,0.878,0.137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.808,0.992,0.992,0.992,0.871,0.38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.416,0.18,0.557,0.871,0.984,0.537,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.161,0.867,0.98,0.329,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.231,0.992,0.549,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.18,0.992,0.863,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.18,0.992,0.906,0.129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.18,0.992,0.992,0.38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.588,0.992,0.957,0.275,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.055,0.769,0.992,0.733,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.588,0.992,0.992,0.357,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.055,0.325,0.918,0.992,0.882,0.102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.349,0.992,0.992,0.961,0.427,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.271,0.918,0.992,0.992,0.733,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.043,0.29,0.922,0.992,0.992,0.796,0.11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.09,0.663,0.992,0.992,0.965,0.89,0.251,0,0,0,0,0.055,0,0,0,0,0,0,0,0,0,0,0,0,0,0.035,0.549,0.588,0.941,0.992,0.992,0.992,0.757,0.078,0.024,0,0,0.051,0.133,0.796,0.259,0,0,0,0,0,0,0,0,0,0,0,0,0.725,0.992,0.992,0.992,0.992,0.992,0.992,0.992,0.992,0.682,0.561,0.561,0.839,0.992,0.992,0.431,0,0,0,0,0,0,0,0,0,0,0,0,0.945,0.992,0.992,0.984,0.969,0.969,0.969,0.973,0.992,0.992,0.992,0.992,0.992,0.992,0.937,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0.463,0.957,0.529,0.31,0,0,0,0.125,0.6,0.992,0.992,0.992,0.992,0.675,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], // 2
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.149,0.169,0.412,1,0.992,0.992,0.992,0.992,0.992,0.682,0.024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.169,0.545,0.878,0.886,0.988,0.992,0.988,0.988,0.988,0.988,0.988,0.988,0.62,0.055,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.698,0.988,0.988,0.988,0.988,0.992,0.988,0.988,0.988,0.988,0.988,0.988,0.988,0.231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.427,0.988,0.988,0.902,0.518,0.522,0.518,0.518,0.741,0.988,0.988,0.988,0.988,0.231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.016,0.114,0.114,0.094,0,0,0,0,0.055,0.886,0.988,0.988,0.675,0.027,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.333,0.953,0.988,0.988,0.565,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.345,0.741,0.988,0.988,0.988,0.055,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.357,0.831,0.969,0.988,0.988,0.988,0.8,0.035,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.125,0.49,0.757,0.757,0.757,0.992,0.988,0.988,0.988,0.933,0.4,0.11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.176,0.871,0.988,0.988,0.988,0.988,0.992,0.988,0.988,0.988,0.694,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.176,0.875,0.992,0.992,0.992,0.992,1,0.992,0.992,0.992,0.992,0.29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.122,0.482,0.204,0.173,0.173,0.173,0.173,0.561,0.988,0.988,0.29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.059,0.988,0.988,0.29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.337,0.988,0.988,0.29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0.294,0.035,0,0,0,0,0,0,0.384,0.949,0.988,0.988,0.29,0,0,0,0,0,0,0,0,0,0,0,0,0,0.239,0.718,0.988,0.114,0,0,0,0,0.071,0.361,0.937,0.988,0.988,0.953,0.255,0,0,0,0,0,0,0,0,0,0,0,0,0,0.816,0.988,0.988,0.576,0.525,0.525,0.525,0.525,0.796,0.992,0.988,0.988,0.737,0.325,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.816,0.988,0.988,0.988,0.988,0.988,0.988,0.988,0.988,0.992,0.902,0.6,0.031,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.192,0.616,0.988,0.988,0.988,0.988,0.988,0.851,0.812,0.573,0.176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.027,0.404,0.922,0.988,0.675,0.404,0.094,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], // 3
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.769,0.388,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0.192,0,0,0,0,0,0,0.133,0.957,0.384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.349,0.529,0,0,0,0,0,0,0.157,0.992,0.384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.671,0.588,0,0,0,0,0,0,0.157,0.992,0.384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.996,0.914,0,0,0,0,0,0,0.302,0.992,0.384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0.533,0,0,0,0,0,0,0.302,0.996,0.388,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.996,0.529,0,0,0,0,0,0,0.482,0.992,0.384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.996,0.529,0,0,0,0,0,0,0.533,0.992,0.384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.063,0.996,0.529,0,0,0,0,0,0,0.533,0.929,0.031,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.384,0.996,0.529,0,0,0.149,0.388,0.384,0.384,0.859,0.608,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.769,1,0.816,0.729,0.996,0.996,1,0.996,0.996,0.996,0.996,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.412,0.996,0.992,0.937,0.706,0.529,0.153,0.153,0.153,0.929,0.667,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.537,0.361,0.094,0,0,0,0,0,0.918,0.608,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.051,0.929,0.608,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.31,0.992,0.608,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.122,0.949,0.608,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.239,0.973,0.608,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.918,0.608,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.918,0.608,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.769,0.608,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], // 4
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.114,0.553,0.776,1,0.776,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.337,0.553,0.776,1,1,1,1,0.667,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.114,0.553,0.886,1,1,1,1,0.776,0.337,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.667,1,1,0.667,0.337,0.337,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.553,0.886,0.667,0.224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.337,1,0.776,0.114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.776,1,0.553,0.337,0.224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.667,1,0.776,0.447,0.886,0.667,0.114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.224,0.776,1,0.447,0.114,0,0.553,1,0.114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.447,1,0.447,0,0,0,0.553,1,0.114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.114,0,0,0,0,0.886,1,0.114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.447,1,0.553,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.337,0,0,0,0,0,0,0,0.447,0.886,0.886,0.114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0.776,0.337,0,0,0,0.553,1,1,0.667,0.114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.886,1,0.886,0.667,0.886,1,1,0.776,0.114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.337,0.776,1,1,0.667,0.553,0.224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], // 5
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.149,0.871,0.882,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.576,0.918,0.988,0.69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.09,0.773,0.992,0.988,0.816,0.075,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.149,0.698,0.988,0.992,0.459,0.255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.224,0.988,0.988,0.992,0.349,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.149,0.871,0.992,0.992,0.31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.514,0.988,0.702,0.106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.776,0.965,0.863,0.145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.31,0.992,0.988,0.529,0.11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.063,0.549,0.992,0.988,0.463,0,0,0,0,0.435,0.549,0.549,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.051,0.749,1,0.992,0.22,0,0,0.447,0.443,0.871,0.992,0.992,1,0.106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.298,0.988,0.992,0.875,0.145,0,0.188,0.682,0.988,0.988,0.949,0.839,0.992,0.78,0.122,0,0,0,0,0,0,0,0,0,0,0,0,0.051,0.427,0.988,0.894,0.51,0,0.149,0.647,0.992,0.914,0.643,0.192,0.247,0.992,0.839,0.122,0,0,0,0,0,0,0,0,0,0,0,0,0.286,0.988,0.988,0.494,0,0.09,0.698,0.988,0.941,0.58,0.027,0.173,0.843,0.941,0.58,0,0,0,0,0,0,0,0,0,0,0,0,0,0.467,0.988,0.988,0,0,0.773,0.988,0.988,0.247,0,0.224,0.988,0.988,0.549,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.529,0.992,0.682,0,0.188,0.898,0.992,0.439,0,0.149,0.871,0.992,0.439,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.529,0.988,0.678,0,0.188,0.89,0.988,0.62,0.886,0.918,0.788,0.106,0.047,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.224,0.988,0.988,0.224,0.408,0.941,0.988,0.988,0.992,0.914,0.29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.949,0.988,0.992,0.988,0.988,0.988,0.988,0.941,0.58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.294,0.741,0.992,0.988,0.988,0.616,0.439,0.247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], // 6
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.031,0.114,0.114,0.345,0.349,0.494,0.494,0.494,0.494,0.494,0.475,0.114,0.012,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.659,0.996,0.996,0.996,0.996,0.996,0.996,0.996,0.996,0.996,0.996,0.996,0.69,0.075,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.686,0.8,0.773,0.773,0.773,0.773,0.773,0.773,0.773,0.773,0.784,0.996,0.996,0.294,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.039,0.02,0,0,0,0,0,0,0,0,0.016,0.757,0.996,0.545,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.059,0.996,0.996,0.208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.059,0.996,0.996,0.208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.373,0.996,0.996,0.208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.439,0.996,0.878,0.063,0,0.294,0.325,0.325,0.325,0.325,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.161,0.192,0.263,0.898,0.996,0.988,0.945,0.945,0.992,0.996,0.949,0.757,0.435,0,0,0,0,0,0,0,0,0,0,0.043,0.29,0.439,0.706,0.812,0.969,0.996,0.996,0.996,0.996,0.988,0.941,0.835,0.561,0.271,0.137,0,0,0,0,0,0,0,0,0,0,0,0.078,0.914,0.996,0.996,0.996,0.996,0.996,0.996,0.882,0.996,0.996,0.314,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.055,0.855,0.996,0.529,0.451,0.086,0.075,0.075,0.118,0.898,0.996,0.075,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.29,0.357,0.031,0,0,0,0,0,0.812,0.996,0.075,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.812,0.996,0.075,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.757,1,0.075,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.439,0.996,0.075,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.439,0.996,0.075,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.071,0.231,0.012,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], // 7
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.455,0.957,0.447,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.169,0.184,0.184,0.133,0,0.455,0.992,0.808,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.075,0.643,0.965,0.992,0.988,0.918,0.129,0.455,0.992,0.682,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.235,0.737,0.988,0.988,0.992,0.988,0.988,0.176,0.824,0.918,0.067,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.29,0.957,0.988,0.988,0.576,0.58,0.824,0.086,0.549,0.98,0.902,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0.992,0.804,0.082,0,0.251,0.549,0.663,0.914,0.992,0.62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.992,0.988,0.604,0.035,0,0,0.267,0.988,0.988,0.698,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.537,0.988,0.988,0.769,0.188,0.192,0.894,0.988,0.89,0.188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0.694,0.988,0.988,0.91,0.914,0.988,0.89,0.196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.059,0.537,0.988,0.988,0.992,0.906,0.188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.318,0.992,0.992,1,0.812,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.894,0.988,0.906,0.91,0.925,0.173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.192,0.894,0.988,0.89,0.188,0.541,0.988,0.596,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.914,0.988,0.89,0.196,0,0.541,0.988,0.816,0.067,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.62,0.992,0.988,0.31,0,0,0.541,0.988,0.867,0.098,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.365,0.992,1,0.565,0,0,0,0.584,0.992,0.678,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.651,0.988,0.976,0.294,0,0,0.169,0.992,0.875,0.098,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.812,0.988,0.929,0.275,0.275,0.439,0.965,0.992,0.682,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.647,0.988,0.992,0.988,0.988,0.988,0.988,0.588,0.067,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.537,0.992,0.988,0.784,0.824,0.125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], // 8
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.043,0.725,1,0.992,0.992,0.902,0.518,0.518,0.122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.035,0.278,0.949,0.988,0.988,0.894,0.906,0.988,0.988,0.988,0.655,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.11,0.651,0.988,0.988,0.922,0.361,0,0.055,0.557,0.988,0.988,0.588,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.047,0.8,0.988,0.918,0.596,0.173,0,0,0.188,0.882,0.988,0.706,0.063,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.047,0.643,0.988,0.91,0.239,0,0,0,0.024,0.702,0.988,0.988,0.235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.192,0.988,0.988,0.298,0,0,0,0.173,0.78,0.988,0.988,0.988,0.235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.349,0.988,0.894,0.125,0,0,0.388,0.906,0.957,0.863,0.988,0.796,0.047,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.663,0.988,0.812,0.38,0.38,0.808,0.918,0.953,0.125,0.616,0.988,0.569,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.235,0.988,0.988,0.988,0.988,0.988,0.784,0.086,0.043,0.776,0.906,0.161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.102,0.514,0.878,0.988,0.988,0.557,0.043,0,0.322,0.988,0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.051,0.992,0.992,0.553,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.322,0.988,0.863,0.141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.816,0.988,0.376,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.094,0.992,0.969,0.306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.475,0.992,0.78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.125,0.847,0.957,0.102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.812,0.988,0.945,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.129,0.784,0.976,0.988,0.361,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.333,0.988,0.988,0.557,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.333,0.988,0.784,0.043,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] // 9
		],
		initialize: async function() {
			console.log('Digit recognizer');
			this.size = 28;
			this.draw_state = 0; // 0 - not drawing, 1 - draw, 2 - erase

			this.showTensorflowInformation('Tensorflow state before initialization');
			this.CNN_model = await tf.loadLayersModel('public/js/neural/mnist_28x28/model.json');
			this.showTensorflowInformation('Tensorflow state after model is loaded');
			$('#recognize_btn').removeAttr('disabled');
		},
		events: {
			'click #canvas div': 'onPixelClicked',
			'mouseenter #canvas div': 'onPixelHovered',
			'mouseup #canvas': 'onClearDrawState',
			'click #recognize_btn': 'onRecognizeClicked',
			'click #clear_btn': 'onClearClicked',
			'click .digit': 'onDigitClicked'
		},
		render: function() {
			this.$el.empty();

			var template = _.template(digitRecognizerTemplate);
			this.$el.append(template({
				base_url: window.base_url,
				public_directory: window.public_directory
			}));

			this.drawDigitBoard();
		},
		drawDigitBoard: function() {
			$('#canvas').empty();

			for (var i=0;i<this.size;i++) {
				for (var k=0;k<this.size;k++) {
					$('#canvas').append('<div id="rect_' + i + '_' + k + '" class="small_rectangle" style="top:' + (i*5) + 'px;left:' + (k*5) + 'px;"></div>');
				}
			}
		},
		onPixelClicked: function(e) {
			this.draw_state = ($(e.target).hasClass('pixel_on')?2:1);

			if (this.draw_state == 1) {
				$(e.target).addClass('pixel_on');
			} else if (this.draw_state == 2) {
				$(e.target).removeClass('pixel_on');
			}
		},
		onPixelHovered: function(e) {
			if (e.buttons == 1 || e.buttons == 3) {
				if (this.draw_state == 0) {
					this.draw_state = ($(e.target).hasClass('pixel_on')?2:1);
				} else if (this.draw_state == 1) {
					$(e.target).addClass('pixel_on');
				} else if (this.draw_state == 2) {
					$(e.target).removeClass('pixel_on');
				}
			}
		},
		onClearDrawState: function(e) {
			this.draw_state = 0;
		},
		onClearClicked: function() {
			$('#canvas div').removeClass('pixel_on');
		},
		onDigitClicked: function(e) {
			this.onClearClicked();

			for (var i=0;i<this.size;i++) {
				for (var k=0;k<this.size;k++) {
					if (this.mnist_digits[parseInt($(e.target).text())][i*this.size+k] > 0.5) {
						$('#rect_' + i + '_' + k).addClass('pixel_on');
					}
				}
			}
		},
		onRecognizeClicked: function() {
			let start_time = performance.now();

			// Creating image array
			let imageData = new Array(784);
			for (let i=0;i<this.size;i++) {
				for (let k=0;k<this.size;k++) {
					if ($('#rect_' + i + '_' + k).hasClass('pixel_on')) {
						imageData[this.size*i+k] = 1;
					} else {
						imageData[this.size*i+k] = 0;
					}
				}
			}

			// Prediction
			let image2D = tf.tensor1d(imageData).reshape([28, 28, 1]);
			let prediction = this.CNN_model.predict(image2D.expandDims(0).toFloat());
			let probabilities = prediction.dataSync();
			let probabilities_array = new Array();
			for (let i=0;i<probabilities.length;i++) {
				probabilities_array.push({
					number: i,
					probability: probabilities[i]
				});
			}

			probabilities_array.sort(
				function(a, b) {
					return b.probability - a.probability;
				}
			);

			$('#inference').empty();
			for (let i=0;i<3;i++) {
				$('#inference').append(probabilities_array[i].number + ': ' + parseInt(probabilities_array[i].probability*1000000)/10000 +'%<br/>');
			}

			$('#inference_time').text(parseInt((performance.now()-start_time)*100)/100 + ' ms');

			this.displayActivationMaps("conv2d_1", imageData, "conv2d_1", 1);
			this.displayActivationMaps("max_pooling2d_1", imageData, "max_pooling2d_1", 2);
			this.displayActivationMaps("conv2d_2", imageData, "conv2d_2", 2);
			this.displayActivationMaps("max_pooling2d_2", imageData, "max_pooling2d_2", 5);
			this.displayActivationMaps("flatten_1", imageData, "flatten_1", [1, 10]);
			this.displayActivationMaps("dense_1", imageData, "dense_1", [4, 10]);
			this.displayActivationMaps("dense_2", imageData, "dense_2", [10, 10]);
		},
		displayActivationMaps: async function(layer, imageData, outputDiv, scale) {
			// Title
			let layerOutputShape = this.CNN_model.getLayer(layer).output.shape;
			let kernelShape = await this.CNN_model.getLayer(layer).kernelSize;
			let is_flattened = false;
			let titleText = (typeof kernelShape!='undefined'?layerOutputShape[3] + ' ' + kernelShape[0] + 'x' + kernelShape[1] + ' kernel, ':'');
			if (typeof layerOutputShape[2] == 'undefined') {
				is_flattened = true;
			}
			titleText += 'activation map size: ' + layerOutputShape[1] + (!is_flattened?'x' + layerOutputShape[2]:'') + 'px';
			$('#' + outputDiv).parent().siblings('.card-header').find('span').empty().append(' - ' + titleText);

			// Create a new NN
			let _self = this, output_image_data;
			tf.tidy(() => {
				let model = tf.model({inputs: _self.CNN_model.inputs, outputs: _self.CNN_model.model.getLayer(layer).output});

				let activations = model.predict(tf.tensor1d(imageData).reshape([_self.size, _self.size, 1]).expandDims(0).toFloat());

				let ac_min = tf.min(activations).dataSync()[0];
				let spread = 255/Math.abs(tf.max(activations).dataSync()[0] - ac_min);
				output_image_data = tf.mul(tf.add(activations, Math.abs(ac_min)), spread).arraySync()[0];
			});

			// Draw activatons
			$('#' + outputDiv).empty();
			if (is_flattened) {
				$('#' + outputDiv).append('<canvas id="' + outputDiv + '_act" height="' + scale[1] + '" width="1024"></canvas>');
				this.draw1DPixels(outputDiv + '_act', output_image_data, scale);
			} else {
				for (let i=0;i<layerOutputShape[3];i++) {
					$('#' + outputDiv).append('<canvas id="' + outputDiv + '_act_' + i + '" height="' + layerOutputShape[2]*scale + '" width="' + layerOutputShape[1]*scale + '"></canvas>');

					this.drawPixels(outputDiv + '_act_' + i, output_image_data, i, scale);
				}
			}
		},
		drawPixels: function(id, data_array, index, scale) {
			let ctx = document.getElementById(id).getContext("2d");

			for (let i=0;i<data_array.length;i++) {
				for (let k=0;k<data_array[0].length;k++) {
					let color = this.convertComponent2Hex(data_array[i][k][index]);
					ctx.fillStyle="#" + color + color + color;
					ctx.fillRect(k*scale, i*scale, scale, scale);
				}
			}
		},
		draw1DPixels: function(id, data_array, scale) {
			let ctx = document.getElementById(id).getContext("2d");

			for (let i=0;i<data_array.length;i++) {
				let color = this.convertComponent2Hex(data_array[i]);
				ctx.fillStyle="#" + color + color + color;
				ctx.fillRect(i*scale[0], 0, scale[0], scale[1]);
			}
		},
		convertComponent2Hex: function(c) {
			var hex = parseInt(c).toString(16);
			return hex.length == 1 ? "0" + hex : hex;
		},
		destroy: function() {
			this.showTensorflowInformation('Tensorflow state before model disposal');
			tf.disposeVariables();
			this.CNN_model.dispose();
			this.showTensorflowInformation('Tensorflow state after disposal');

			this.undelegateEvents();
			this.$el.empty();
			this.stopListening();
			return this;
		},
		showTensorflowInformation: function(msg) {
			console.group(msg);
			console.log('Number of bytes allocated:', this.getReadableFileSizeString(tf.memory().numBytes));
			console.log('Number of Tensors in memory: ', tf.memory().numTensors);
			console.log('Number of unique data buffers allocated:', tf.memory().numDataBuffers);
			if (tf.memory().unreliable) {
				console.log('Reasons why the memory is unreliable:', tf.memory().reasons);
			}
			console.groupEnd();
		},
		getReadableFileSizeString: function(fileSizeInBytes) {
			let i = -1;
			let byteUnits = [' kB', ' MB', ' GB', ' TB', 'PB', 'EB', 'ZB', 'YB'];
			do {
				fileSizeInBytes = fileSizeInBytes / 1024;
				i++;
			} while (fileSizeInBytes > 1024);

			return Math.max(fileSizeInBytes, 0.1).toFixed(1) + byteUnits[i];
		}
	});

	return view;
});