define([
	'jquery',
	'underscore',
	'backbonejs',
	'text!backbone/templates/mnist_pca.html',
	'numeric',
	'mathjs',
	'd3',
	'bootstrap'
], function ($, _, Backbone, mnistPCATemplate, numeric, math, d3) {
	'use strict';

	var view = Backbone.View.extend({
		el: '#main',
		events: {
			'click #calc_btn': 'onCalculateClicked'
		},
		mnist_digit_size: 28,
		mnist_digits_28x28: [
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,159,253,159,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,238,252,252,252,237,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,227,253,252,239,233,252,57,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,60,224,252,253,252,202,84,252,253,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,252,252,252,253,252,252,96,189,253,167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,238,253,253,190,114,253,228,47,79,255,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,238,252,252,179,12,75,121,21,0,0,253,243,50,0,0,0,0,0,0,0,0,0,0,0,0,0,38,165,253,233,208,84,0,0,0,0,0,0,253,252,165,0,0,0,0,0,0,0,0,0,0,0,0,7,178,252,240,71,19,28,0,0,0,0,0,0,253,252,195,0,0,0,0,0,0,0,0,0,0,0,0,57,252,252,63,0,0,0,0,0,0,0,0,0,253,252,195,0,0,0,0,0,0,0,0,0,0,0,0,198,253,190,0,0,0,0,0,0,0,0,0,0,255,253,196,0,0,0,0,0,0,0,0,0,0,0,76,246,252,112,0,0,0,0,0,0,0,0,0,0,253,252,148,0,0,0,0,0,0,0,0,0,0,0,85,252,230,25,0,0,0,0,0,0,0,0,7,135,253,186,12,0,0,0,0,0,0,0,0,0,0,0,85,252,223,0,0,0,0,0,0,0,0,7,131,252,225,71,0,0,0,0,0,0,0,0,0,0,0,0,85,252,145,0,0,0,0,0,0,0,48,165,252,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,253,225,0,0,0,0,0,0,114,238,253,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,252,249,146,48,29,85,178,225,253,223,167,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,252,252,252,229,215,252,252,252,196,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,199,252,252,253,252,252,233,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,128,252,253,252,141,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,187,167,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,254,254,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,254,252,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,251,254,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,242,254,199,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,209,254,242,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,254,254,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,244,254,254,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,241,254,244,62,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,222,254,254,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,254,254,247,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,182,254,254,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,254,254,193,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,223,254,234,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,168,254,248,57,0,0,0,0,0,0,45,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,254,254,215,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,192,254,219,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,197,254,254,191,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,254,254,220,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,240,254,250,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,128,191,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,255,255,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,255,255,255,191,64,128,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,255,255,255,191,0,0,255,255,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,191,255,128,0,191,255,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,128,64,0,0,64,64,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,255,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,255,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,255,255,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,255,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,191,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,255,255,255,255,255,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,255,255,255,255,255,255,255,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,255,255,255,255,128,191,255,255,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,255,255,255,255,64,0,0,255,255,255,255,191,128,128,64,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,64,0,0,0,0,191,255,255,255,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,64,0,0,0,0,0,0,128,255,255,255,255,64,0,0,0,0,0,0,0,0,0,0,0,0,64,128,64,0,0,0,0,0,0,0,0,128,191,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,105,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,209,212,253,214,209,209,209,209,209,211,86,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,253,243,245,244,251,238,252,253,253,254,253,187,15,2,0,0,0,0,0,0,0,0,0,0,0,0,0,183,253,89,64,55,118,0,127,133,204,254,253,253,253,29,0,0,0,0,0,0,0,0,0,0,0,0,0,12,29,10,0,0,0,0,0,0,17,29,82,253,253,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,171,253,253,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,184,253,253,253,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,169,186,205,247,254,253,253,182,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,236,253,253,253,253,254,253,253,253,236,177,45,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,253,253,253,253,253,254,253,253,253,253,253,253,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,149,149,224,254,255,139,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,253,253,253,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,168,252,253,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,75,31,0,0,0,0,0,54,154,251,253,209,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,241,253,122,18,0,20,102,179,232,253,253,248,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,253,253,253,205,134,212,253,253,253,253,253,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,248,253,253,255,253,253,253,253,242,163,111,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,86,208,209,208,208,208,164,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,253,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,196,252,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,252,170,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,253,160,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,56,179,135,27,0,0,0,0,27,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,225,164,0,0,0,0,0,0,74,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,165,244,175,0,0,0,0,0,0,43,232,208,0,0,0,0,0,0,0,0,0,0,0,0,0,4,69,188,252,252,156,0,0,0,0,0,0,155,252,189,0,0,0,0,0,0,0,0,0,0,0,0,0,137,252,252,252,171,17,0,0,0,0,0,75,238,244,26,0,0,0,0,0,0,0,0,0,0,0,0,134,251,252,252,252,247,187,111,111,111,111,168,241,252,198,92,0,0,0,0,0,0,0,0,0,0,0,0,210,253,253,253,253,253,253,253,255,253,253,253,253,253,253,195,0,0,0,0,0,0,0,0,0,0,0,0,64,211,186,209,220,186,186,186,187,232,252,252,185,77,77,30,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,16,23,0,0,0,0,176,252,191,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,249,252,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,252,116,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,136,253,229,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,161,252,247,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,171,252,252,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,252,252,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,252,137,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,59,50,0,0,50,18,32,59,59,59,59,59,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,253,179,20,103,247,226,235,253,254,253,253,253,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,253,253,253,254,253,253,253,222,175,174,174,174,70,0,0,0,0,0,0,0,0,0,0,0,0,0,47,228,253,253,222,117,117,87,19,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,245,126,96,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,255,241,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,249,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,213,218,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,230,227,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,253,231,107,98,98,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,254,196,222,254,254,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,39,0,18,39,229,253,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,253,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,185,237,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,145,253,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,163,254,229,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,58,12,35,154,224,243,203,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,253,223,253,253,175,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,213,183,117,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,84,164,213,204,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,206,254,254,254,254,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,123,249,254,254,254,254,254,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,254,254,254,225,158,67,110,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,235,254,244,168,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,196,254,254,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,74,254,248,217,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,118,254,254,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,255,254,253,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,254,254,192,0,22,42,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,242,254,254,242,203,224,244,204,125,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,254,254,254,254,254,254,254,254,254,182,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,254,254,254,233,202,166,237,240,233,254,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,254,254,57,12,6,0,12,13,193,254,250,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,254,254,134,0,0,0,0,0,161,254,254,240,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,246,255,236,52,0,0,0,0,98,254,254,244,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,249,254,254,234,170,111,109,129,235,254,254,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,251,254,254,254,254,254,254,254,254,251,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,248,254,254,254,214,253,234,184,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,115,110,212,254,67,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,85,166,254,254,254,195,114,56,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,253,253,253,253,253,253,253,253,251,209,160,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,253,253,253,253,253,253,253,253,253,253,253,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,253,239,62,34,35,34,115,173,133,133,240,211,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,253,223,0,0,0,0,0,0,0,0,224,253,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,253,223,0,0,0,0,0,0,0,9,228,253,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,253,223,0,0,0,0,0,0,0,70,253,253,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,163,223,0,0,0,0,0,0,9,210,253,253,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,101,0,0,0,0,0,0,53,253,254,253,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,236,253,253,155,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,142,253,253,243,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,253,253,253,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,211,253,253,194,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,253,253,249,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,250,253,254,229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,253,253,235,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,226,253,253,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,253,253,250,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,247,254,253,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,212,253,253,234,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,13,117,184,253,255,242,116,13,99,167,213,132,76,0,0,0,0,0,0,0,0,0,0,0,0,0,47,175,252,252,252,252,253,252,252,252,252,252,252,252,206,18,0,0,0,0,0,0,0,0,0,0,6,118,225,252,252,252,219,158,96,168,252,252,243,158,245,252,252,131,0,0,0,0,0,0,0,0,0,5,78,252,252,252,213,101,8,0,0,25,252,252,169,14,214,252,252,51,0,0,0,0,0,0,0,0,0,111,252,252,238,157,14,0,0,0,0,7,184,252,72,102,252,252,174,4,0,0,0,0,0,0,0,0,10,227,252,252,100,0,0,0,0,0,0,0,55,214,69,210,252,252,110,0,0,0,0,0,0,0,0,0,53,252,252,172,14,0,0,0,0,0,0,0,0,39,182,252,252,133,5,0,0,0,0,0,0,0,0,0,29,252,252,205,28,0,0,0,0,0,0,0,14,184,252,252,252,36,0,0,0,0,0,0,0,0,0,0,7,206,252,252,149,109,21,0,0,0,0,11,129,252,252,221,46,4,0,0,0,0,0,0,0,0,0,0,0,18,149,252,252,252,243,241,131,121,6,191,252,252,252,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,207,241,251,253,253,253,255,253,253,222,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,153,250,252,253,252,252,157,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,140,243,252,253,252,252,252,98,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,174,252,252,229,84,152,234,252,252,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,173,252,252,145,38,0,0,71,252,252,197,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,252,252,87,6,0,0,0,19,212,252,231,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,181,252,252,36,0,0,0,49,109,252,252,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,252,252,222,217,217,218,237,252,252,252,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,116,232,252,252,252,253,252,252,252,145,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,115,131,189,132,131,115,11,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,131,215,254,254,221,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,165,248,254,253,225,202,253,249,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,235,253,227,159,75,18,3,191,254,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,243,253,160,16,0,0,0,8,212,222,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,253,194,16,0,0,0,0,84,253,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,170,255,238,26,0,0,0,0,0,84,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,253,254,63,0,0,0,0,0,0,41,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,253,254,18,0,0,0,0,86,172,243,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,253,254,31,3,19,84,167,249,253,251,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,227,254,237,191,253,253,254,220,253,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,202,254,191,181,117,33,171,254,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,18,3,0,0,62,245,253,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,253,208,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,254,253,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,155,254,253,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,228,255,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,253,254,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,194,253,172,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,253,240,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,233,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		],
		render: function() {
			this.$el.empty();

			var template = _.template(mnistPCATemplate);
			this.$el.append(template());

			for (var i=0;i<10;i++) {
				this.drawImage('orig_'+i, this.mnist_digit_size, this.mnist_digits_28x28[i]);
			}

			$('.ajax_loader').show();
			var _self = this;
			setTimeout(function() {
				_self.drawPCA();
			}, 5);
		},
		drawImage: function(target_id, size, img_data) {
			var canvas = document.getElementById(target_id);
			canvas.height = size;
			canvas.width = size;
			var ctx = canvas.getContext("2d");
			var canvasData = ctx.getImageData(0, 0, canvas.width, canvas.height);

			var img_pos = 0;
			for (var i = 0; i < img_data.length; i++) {
				canvasData.data[img_pos * 4 + 0] = 255-img_data[i];
				canvasData.data[img_pos * 4 + 1] = 255-img_data[i];
				canvasData.data[img_pos * 4 + 2] = 255-img_data[i];
				canvasData.data[img_pos * 4 + 3] = 255;
				img_pos++;
			}

			ctx.putImageData(canvasData, 0, 0);
		},
		drawPCA: function() {
			console.log('Normalizing matrix');
			var digits = this.mnist_digits_28x28;
			// Mean
			for (var i=0;i<digits.length;i++) {
				var mean = 0, sum = digits[i].reduce(function(a, b) { return a+b; }, 0);
				numeric.subeq(digits[i], sum/digits[i].length)
			}

			// Standard deviation
			for (var i=0;i<digits.length;i++) {
				var std_dev = math.std(digits[i]);
				if (std_dev != 0) {
					numeric.diveq(digits[i], std_dev);
				}
			}

			console.log('Calculating SVD');
			var svd = numeric.svd(numeric.transpose(digits));

			var U_reduced = this.reducePCA(numeric.transpose(svd.U), 200),
				components = numeric.dot(numeric.transpose(U_reduced), digits),
				approximation = numeric.dot(U_reduced, components);

			console.log('Digits: ', digits);
			console.log('U_reduced: ', U_reduced);
			console.log('Components: ', components);
			console.log('Approximation: ', approximation);

			for (var i=0;i<10;i++) {
				var min = Math.min.apply(null, approximation[i]);
				var img2show = numeric.mul(numeric.add(approximation[i], Math.abs(min)), 255);
				this.drawImage('rec_' + i, this.mnist_digit_size, img2show);
			}

			console.log('Calculating eigenvectors');
			var eig = numeric.transpose(svd.U);

			for (var i=0;i<10;i++) {
				var min = Math.min.apply(null, eig[i]);
				var img2show = numeric.mul(numeric.add(eig[i], Math.abs(min)), 255);
				this.drawImage('eig_' + i, this.mnist_digit_size, img2show);
			}

			// Draw covariance
			console.log('Calculating covariance matrix');
			var X_cov = numeric.div(numeric.dot(numeric.transpose(digits), digits), (digits[0].length-1)), // covariance matrix
				X_cov_diag = numeric.getDiag(X_cov);

			// Explained variance graph
			console.log('Drawing variance graph');
			var totalVariance = X_cov_diag.reduce(function(a, b) { return a+b; }, 0),
				sortedVariance = X_cov_diag.concat().sort(function(a, b) { return b-a; }),
				variance = [],
				cumulativeVariance = [];

			for (var i=0;i<X_cov_diag.length;i++) {
				variance.push({
					i: i,
					v: X_cov_diag[i]/totalVariance*100
				});

				cumulativeVariance.push({
					i: i,
					v: sortedVariance[i]/totalVariance*100
				});
			}

			this.drawExplainedVarianceCharts([variance, cumulativeVariance]);

			$('.ajax_loader').hide();
			// https://wellecks.wordpress.com/tag/eigenfaces/
			// https://glowingpython.blogspot.my/2011/07/pca-and-image-compression-with-numpy.html
			// https://shankarmsy.github.io/posts/pca-sklearn.html
		},
		// http://davywybiral.blogspot.my/2012/11/numeric-javascript.html
		calculatePCA: function(X) {
			var m = X.length;
			var sigma = numeric.div(numeric.dot(numeric.transpose(X), X), m);
			return numeric.svd(sigma);
			/**
			 * A = USV'
			 * U: orthogonal matrix containing eigenvectors of AA'
			 * S: ordered singular values in the diagonal. Square root of eigenvalues associated with AA' or A'A (it's the same)
			 * V: orthogonal matrix containing eigenvectors of A'A
			 * SVD decomposition - http://web.mit.edu/be.400/www/SVD/Singular_Value_Decomposition.htm
			 */
		},
		reducePCA: function(U, k) {
			// Return matrix of k first principle components as column vectors
			return U.map(function(row) {
				return row.slice(0, k)
			});
		},
		projectPCA: function(X, Ureduce) {
			// Project matrix X onto reduced principle components matrix
			return numeric.dot(X, Ureduce);
		},
		pcaRecover: function(Z, Ureduce) {
			// Recover matrix from projection onto reduced principle components
			return numeric.dot(Z, numeric.transpose(Ureduce));
		},
		drawExplainedVarianceCharts: function(data) {
			var svg = d3.select("#variance_explained_chart"),
				margin = {top: 20, right: 20, bottom: 30, left: 50},
				width = +svg.attr("width") - margin.left - margin.right,
				height = +svg.attr("height") - margin.top - margin.bottom,
				g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

			var x = d3.scaleLinear().rangeRound([0, width]);
			var y = d3.scaleLinear().rangeRound([height, 0]);

			var line = d3.line()
				.x(function(d) { return x(d.i); })
				.y(function(d) { return y(d.v); });

			x.domain(d3.extent(data[0], function(d) { return d.i; }));
			y.domain(d3.extent(data[0], function(d) { return d.v; }));

			g.append("g")
				.attr("transform", "translate(0," + height + ")")
				.call(d3.axisBottom(x))
				.append("text")
				.attr("fill", "#000")
				.attr("transform", "rotate(-90)")
				.attr("x", width-50)
				.attr("y", -8)
				//.attr("dy", "0.71em")
				.attr("text-anchor", "end")
				.text("Elements");

			g.append("g")
				.call(d3.axisLeft(y))
				.append("text")
				.attr("fill", "#000")
				.attr("transform", "rotate(-90)")
				.attr("y", 6)
				.attr("dy", "0.71em")
				.attr("text-anchor", "end")
				.text("Variance explained (%)");

			// Variance
			g.append("path")
				.datum(data[0])
				.attr("fill", "none")
				.attr("stroke", "steelblue")
				.attr("stroke-linejoin", "round")
				.attr("stroke-linecap", "round")
				.attr("stroke-width", 1.5)
				.attr("d", line);

			// Cumulative Variance
			g.append("path")
				.datum(data[1])
				.attr("fill", "none")
				.attr("stroke", "orange")
				.attr("stroke-linejoin", "round")
				.attr("stroke-linecap", "round")
				.attr("stroke-width", 1.5)
				.attr("d", line);
		},
		test: function() {
			// Eigenvector calculation
			// http://alyssaq.github.io/2015/understanding-eigenvectors-and-eigenvalues-visually/
			/*var A = [[2, 0], [0, 3]];
			var Aeig = numeric.eig(A);
			console.log('Eigenvalues: ');
			console.log(Aeig.lambda.x);
			console.log('Eigenvectors');
			console.log(Aeig.E.x);

			// https://alyssaq.github.io/2015/singular-value-decomposition-visualisation/
			var A = [[1, 0.3], [0.45, 1.2]], x = [[-10, -10, 20, 20], [-10, 20, 20, -10]];
			console.log('Ax:');
			console.log(math.multiply(A, x));
			var Aeig = numeric.eig(A);
			console.log('Eigenvalues: ');
			console.log(Aeig.lambda.x);
			console.log('Eigenvectors');
			console.log(Aeig.E.x);
			console.log('Gradient of 1st eigenvector:' + math.round(Aeig.E.x[1][1], 3) + '/' + math.round(Aeig.E.x[0][1], 3) + '=' + math.round(Aeig.E.x[1][1]/Aeig.E.x[0][1], 3));
			console.log('Gradient of 2nd eigenvector:' + math.round(Aeig.E.x[1][0], 3) + '/' + math.round(Aeig.E.x[0][0], 3) + '=' + math.round(Aeig.E.x[1][0]/Aeig.E.x[0][0], 3));
			console.log('A = AEigenvectors * AEigenvalues * AEigenvectors^-1');
			console.log(math.multiply(Aeig.E.x, math.diag(Aeig.lambda.x), math.inv(Aeig.E.x)));*/

			// http://setosa.io/ev/principal-component-analysis/
			// https://github.com/mljs/pca/blob/master/src/pca.js
		},
		destroy: function() {
			this.undelegateEvents();
			this.$el.empty();
			this.stopListening();
			return this;
		}
	});

	return view;
});